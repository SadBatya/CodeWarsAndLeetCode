/**
 * Реализовать функцию-обертку runOnce, которая принимает
 * функцию и возвращает новую функцию.
 * Новая функция может быть вызвана только один раз,
 * все последующие вызовы возвращают undefined.
 *
 * Оборачиваемая функция может принимать аргументы
 * и возвращать результат.
 */

function runOnce(fn) {
  // 💡 Флаг, показывающий — была ли функция уже вызвана
  let called = false;

  // Возвращаем новую функцию-обертку
  return (...args) => {
    // 🚫 Если функция уже вызывалась — просто выходим и возвращаем undefined
    if (called) {
      return undefined;
    }

    // ✅ Если первый вызов — отмечаем, что функция уже вызывалась
    called = true;

    // 🔁 Вызываем оригинальную функцию с переданными аргументами
    return fn(...args);
  };
}

// 🧩 Пример использования:

const logHello = () => {
  console.log("Hello!");
};

// Оборачиваем функцию так, чтобы она вызывалась только один раз
const logHelloOnce = runOnce(logHello);

console.clear();

// 🔥 Первый вызов — функция выполнится
logHelloOnce(); // -> Hello!

// ❌ Второй вызов — ничего не произойдет, вернётся undefined
logHelloOnce(); // -> undefined
