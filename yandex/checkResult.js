/**
 * –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–µ—à–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ –ø–æ –¥–≤—É–º —Å–µ—Ä–≤–∏—Å–∞–º, –≤—ã–∑–≤–∞–≤ checkResult(url1, solution), checjresult(url2, solution)
 * checkResult: (url: string, solution: string | number) => Promise<boolean>
 * –ï—Å–ª–∏ –æ–±–∞ –∑–∞–ø—Ä–æ—Å–∞ –≤–µ—Ä–Ω—É–ª–∏ true - –≤—ã–≤–µ—Å—Ç–∏ true
 * –ï—Å–ª–∏ —Ö–æ—Ç—å –æ–¥–∏–Ω –≤–µ—Ä–Ω—É–ª false - –≤—ã–≤–µ—Å—Ç–∏ false
 * –ï—Å–ª–∏ —Ö–æ—Ç—å –æ–¥–∏–Ω –Ω–µ –æ—Ç–≤–µ—Ç–∏–ª - –≤—ã–≤–µ—Å—Ç–∏ error
 * –ï—Å–ª–∏ —Ö–æ—Ç—å –æ–¥–∏–Ω –æ—Ç–≤–µ—á–∞–µ—Ç –¥–æ–ª—à–∫–µ 1 —Å–µ–∫ - –≤—Å—ã–≤–µ—Å—Ç–∏ timeout
 */

import { checkResult } from "myLib";

const solution = "Any answer";
const url1 = "yandex.ru";
const url2 = "google.com";

// –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–≤—É—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
const checkServices = async (promiseArr) => {
  // ‚è∞ –û–±—ë—Ä—Ç–∫–∞ –¥–ª—è –∫–æ–Ω—Ç—Ä–æ–ª—è —Ç–∞–π–º–∞—É—Ç–∞ (1 —Å–µ–∫—É–Ω–¥–∞)
  const timeoutPromise = new Promise((_, reject) =>
    setTimeout(() => reject("timeout"), 1000)
  );

  try {
    // Promise.race: –∫—Ç–æ –±—ã—Å—Ç—Ä–µ–µ ‚Äî —Ç–∞–π–º–∞—É—Ç –∏–ª–∏ –Ω–∞—à–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏
    const results = await Promise.race([
      Promise.allSettled(promiseArr), // –∂–¥—ë–º –æ–±–∞ –ø—Ä–æ–º–∏—Å–∞
      timeoutPromise, // –∏–ª–∏ —Ç–∞–π–º–∞—É—Ç
    ]);

    // –ï—Å–ª–∏ results ‚Äî —ç—Ç–æ —Å—Ç—Ä–æ–∫–∞ 'timeout', –∑–Ω–∞—á–∏—Ç —Å—Ä–∞–±–æ—Ç–∞–ª —Ç–∞–π–º–µ—Ä
    if (results === "timeout") {
      console.log("timeout");
      return;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –±—ã–ª–æ –ª–∏ –æ—à–∏–±–æ–∫
    if (results.some((r) => r.status === "rejected")) {
      console.log("error");
      return;
    }

    // –ò–∑–≤–ª–µ–∫–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è (true/false)
    const values = results.map((r) => r.value);

    // –ï—Å–ª–∏ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ false ‚Üí false
    if (values.includes(false)) {
      console.log("false");
      return;
    }

    // –ï—Å–ª–∏ –æ–±–∞ true ‚Üí true
    console.log("true");
  } catch (e) {
    // –ù–∞ —Å–ª—É—á–∞–π –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω—ã—Ö –æ—à–∏–±–æ–∫
    console.log("error");
  }
};

// üî• –ó–∞–ø—É—Å–∫
checkServices([checkResult(url1, solution), checkResult(url2, solution)]);

checkResult(url1, solution);
checkResult(url2, solution);
