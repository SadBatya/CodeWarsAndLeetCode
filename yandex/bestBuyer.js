/**
 * В прототипе рекламной сети продажа рекламных мест устроена
 * следующим образом: покупатели заранее называют свою цену,
 * а на каждое рекламное место отвечает, готовы они его купить или нет.
 * Необходимо реализовать функцию, которая перед продажей рекламного места
 * будет ожидать согласия или отказа от покупателей с высокой ценой ставки,
 * среди тех, кто согласился на покупку.
 * Вернуть ответ из функции нужна настолько быстро, насколько это возможно.
 * Нужно вернуть индекс покупателя
 * **/

/**
 * Примеры:
 * Покупатели предлагают цену 1, 5, 10
 * Покупатель с предложением 10 ответил отказом
 * Покупатель с предложение ответил согласием // Все еще ждем, посколько можнт ответить покупатель с ценой 5
 * Покупатель с предложением 5 ответил согласием // Выбираем покупателя с предложение 5
 */

/**
 * Покупатели предлагают цену 1, 5, 10
 * Покупатель с предложением 10 ответил отказом
 * Покупатель с предложением 5 ответил согласием // Не ждем ответа от покупателя с предожением 1 - его точно не выбираем
 */

/**
 * Покупатель предлагает цену 1, 2
 * Покупатель с предложением 1 ответил отказом
 * Покупатель с предложением 2 ответил отказом // Не выбираем ни одного покупателя
 *
 */

// Пример входных данных
// const buyers = [
//   { price: 10, accepts: asyncResponse(0, false) },
//   { price: 5, accepts: asyncResponse(100, false) },
//   { price: 1, accepts: asyncResponse(300, true) },
// ];

async function bestBuyer(buyers) {
  // Добавим индексы, чтобы потом вернуть оригинальный
  const withIndex = buyers.map((b, i) => ({ ...b, index: i }));

  // Сортируем по убыванию цены
  withIndex.sort((a, b) => b.price - a.price);

  // Массив промисов
  const results = withIndex.map((b) =>
    b.accepts.then((result) => ({ ...b, result }))
  );

  // Хранилище ответов
  const resolved = new Array(withIndex.length).fill(null);

  return new Promise((resolve) => {
    results.forEach(async (promise, i) => {
      const { result, index } = await promise;
      resolved[i] = result;

      // Проверяем условие: все с более высокой ценой отказались
      // и этот согласился
      const higherRefused = resolved.slice(0, i).every((r) => r === false);

      if (higherRefused && result === true) {
        resolve(index);
      }

      // Если все ответили и никто не согласился
      if (resolved.every((r) => r !== null) && !resolved.includes(true)) {
        resolve(-1);
      }
    });
  });
}
